Q1. Use the above encoding tree to decode the bit sequence `0101100011`.
A1. MOONS

Q2. Prepare a table for the above encoding tree that lists each character with its assigned bit sequence.
Use your table to encode the string `"SONS"`.
A2. 
----------
O | 1
N | 00
M | 010
S | 011

SONS = 011100011

Q3. Huffman codes obey the _prefix_ property: no character's encoded bit sequence is a prefix of any other.
What feature of an encoding tree demonstrates that it obeys the prefix property?
A3. The feauture of an encoding tree that demonstrates the prefix property is that every parent node in a graph has two children that adds 0 or 1, so every leaf in the tree will have a different prefix than any other.

Q4. Flatten the encoding tree above on the right into its sequence of bits and sequence of characters.
A4. 
Bits: 1101000
Characters: NMSO

Q5. Unflatten the sequences `110100100` and `FLERA` to reconstruct the original encoding tree.
A5.
      *
     /\
    /  \
   /    \
  *      *
 / \    / \
F   *  R   A
   / \
  L   E

Q6. Construct a Huffman coding tree for the input `"BOOKKEEPER"`.
A6.
      *
      /\
     /  \
    *    *
   /\    /\
  E  *  O  K
    /\
   P  *
      /\
     B  R

Q7. A node in a Huffman coding tree has two non-null children or no children.
Why does it not make sense for a node in a Huffman tree to have just one non-null child?
A7. It makes sense because a huffman tree can always have anything but 1 because when you are making the tree, you are taking 2 nodes and turning them into a subtree. So any subtree will always have 2 children or none (a leaf)..

Q8. Describe the difference in shape of a Huffman coding tree that will lead to significant
savings for compression versus one that will achieve little to no compression.
A8. One that would achieve little to no compression would be like the one from Q6, where you have one side of the tree very long. The one that would lead to significant savings in compression would be a more split up and even tree.
